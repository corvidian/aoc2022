Monkey 0:
  Starting items: 79, 98
  Operation: new = old * 19
  Test: divisible by 23
    If true: throw to monkey 2
    If false: throw to monkey 3

Monkey 1:
  Starting items: 54, 65, 75, 74
  Operation: new = old + 6
  Test: divisible by 19
    If true: throw to monkey 2
    If false: throw to monkey 0

Monkey 2:
  Starting items: 79, 60, 97
  Operation: new = old * old
  Test: divisible by 13
    If true: throw to monkey 1
    If false: throw to monkey 3

Monkey 3:
  Starting items: 74
  Operation: new = old + 3
  Test: divisible by 17
    If true: throw to monkey 0
    If false: throw to monkey 1

fn monkey0_op(old: u64) -> u64 {
    old * 19
}
fn monkey1_op(old: u64) -> u64 {
    old + 6
}
fn monkey2_op(old: u64) -> u64 {
    old * old
}
fn monkey3_op(old: u64) -> u64 {
    old + 3
}

    let monkey0 = Monkey {
        items: VecDeque::from(vec![79, 98]),
        operation: &monkey0_op,
        test: 23,
        if_true: 2,
        if_false: 3,
        inspections: 0,
    };
    let monkey1 = Monkey {
        items: VecDeque::from(vec![54, 65, 75, 74]),
        operation: &monkey1_op,
        test: 19,
        if_true: 2,
        if_false: 0,
        inspections: 0,
    };
    let monkey2 = Monkey {
        items: VecDeque::from(vec![79, 60, 97]),
        operation: &monkey2_op,
        test: 13,
        if_true: 1,
        if_false: 3,
        inspections: 0,
    };
    let monkey3 = Monkey {
        items: VecDeque::from(vec![74]),
        operation: &monkey3_op,
        test: 17,
        if_true: 0,
        if_false: 1,
        inspections: 0,
    };    