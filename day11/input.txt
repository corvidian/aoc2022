Monkey 0:
  Starting items: 65, 78
  Operation: new = old * 3
  Test: divisible by 5
    If true: throw to monkey 2
    If false: throw to monkey 3

Monkey 1:
  Starting items: 54, 78, 86, 79, 73, 64, 85, 88
  Operation: new = old + 8
  Test: divisible by 11
    If true: throw to monkey 4
    If false: throw to monkey 7

Monkey 2:
  Starting items: 69, 97, 77, 88, 87
  Operation: new = old + 2
  Test: divisible by 2
    If true: throw to monkey 5
    If false: throw to monkey 3

Monkey 3:
  Starting items: 99
  Operation: new = old + 4
  Test: divisible by 13
    If true: throw to monkey 1
    If false: throw to monkey 5

Monkey 4:
  Starting items: 60, 57, 52
  Operation: new = old * 19
  Test: divisible by 7
    If true: throw to monkey 7
    If false: throw to monkey 6

Monkey 5:
  Starting items: 91, 82, 85, 73, 84, 53
  Operation: new = old + 5
  Test: divisible by 3
    If true: throw to monkey 4
    If false: throw to monkey 1

Monkey 6:
  Starting items: 88, 74, 68, 56
  Operation: new = old * old
  Test: divisible by 17
    If true: throw to monkey 0
    If false: throw to monkey 2

Monkey 7:
  Starting items: 54, 82, 72, 71, 53, 99, 67
  Operation: new = old + 1
  Test: divisible by 19
    If true: throw to monkey 6
    If false: throw to monkey 0


fn monkey0_op(old: u64) -> u64 {
    old * 3
}
fn monkey1_op(old: u64) -> u64 {
    old + 8
}
fn monkey2_op(old: u64) -> u64 {
    old + 2
}
fn monkey3_op(old: u64) -> u64 {
    old + 4
}
fn monkey4_op(old: u64) -> u64 {
    old * 19
}
fn monkey5_op(old: u64) -> u64 {
    old + 5
}
fn monkey6_op(old: u64) -> u64 {
    old * old
}
fn monkey7_op(old: u64) -> u64 {
    old + 1
}    

    let monkey0 = Monkey {
        items: VecDeque::from(vec![65, 78]),
        operation: &monkey0_op,
        test: 5,
        if_true: 2,
        if_false: 3,
        inspections: 0,
    };
    let monkey1 = Monkey {
        items: VecDeque::from(vec![54, 78, 86, 79, 73, 64, 85, 88]),
        operation: &monkey1_op,
        test: 11,
        if_true: 4,
        if_false: 7,
        inspections: 0,
    };
    let monkey2 = Monkey {
        items: VecDeque::from(vec![69, 97, 77, 88, 87]),
        operation: &monkey2_op,
        test: 2,
        if_true: 5,
        if_false: 3,
        inspections: 0,
    };
    let monkey3 = Monkey {
        items: VecDeque::from(vec![99]),
        operation: &monkey3_op,
        test: 13,
        if_true: 1,
        if_false: 5,
        inspections: 0,
    };
    let monkey4 = Monkey {
        items: VecDeque::from(vec![60, 57, 52]),
        operation: &monkey4_op,
        test: 7,
        if_true: 7,
        if_false: 6,
        inspections: 0,
    };
    let monkey5 = Monkey {
        items: VecDeque::from(vec![91, 82, 85, 73, 84, 53]),
        operation: &monkey5_op,
        test: 3,
        if_true: 4,
        if_false: 1,
        inspections: 0,
    };
    let monkey6 = Monkey {
        items: VecDeque::from(vec![88, 74, 68, 56]),
        operation: &monkey6_op,
        test: 17,
        if_true: 0,
        if_false: 2,
        inspections: 0,
    };
    let monkey7 = Monkey {
        items: VecDeque::from(vec![54, 82, 72, 71, 53, 99, 67]),
        operation: &monkey7_op,
        test: 19,
        if_true: 6,
        if_false: 0,
        inspections: 0,
    };